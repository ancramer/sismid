---
title: "Combining nowcasting and forecasting"
order: 15
---

# Introduction

In this advanced session, we will explore how to combine nowcasting and forecasting to make better predictions in the presence of right-truncated data.
This session builds directly on the joint nowcasting models from Session 7 and the forecasting concepts from earlier sessions.

**Duration**: 1 hour

**Learning objectives**:

- Understand how right truncation affects forecasting accuracy
- Adapt nowcasting models to include forecasting capabilities  
- Compare different forecasting approaches with incomplete data
- Evaluate forecast performance using proper scoring rules

# Slides

[Add link to slides here]

# Objectives

By the end of this session, you will be able to:

1. Explain why ignoring right truncation leads to biased forecasts
2. Implement three different approaches to forecasting with incomplete data
3. Extend joint nowcasting models to produce forecasts
4. Evaluate and compare forecast performance across different methods
5. Understand the trade-offs between computational complexity and forecast accuracy

:::{.callout-note}
## Assumed knowledge

This session assumes you have completed:
- Session 7: Joint nowcasting of cases by date of infection and report
- Session 2: Simulating infectious disease dynamics and Rt estimation
- Session 9: Introduction to forecasting concepts
:::

# Setup

:::{.callout-tip collapse="true"}
## Setting up for this session

**Source file:** sessions/joint-nowcasting-forecasting.qmd

**To run code in this session, you will need to:**

- Have completed the setup from Session 7 (joint nowcasting)
- Have Stan models compiled from previous sessions
- Load additional packages for forecast evaluation

To get started:

1. Check your RStudio project is open
2. Source required functions
3. Load pre-fitted models (to save computation time)
:::

```{r setup}
#| message: false
#| warning: false

# Load required libraries
library(nfidd)
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)
library(tidybayes)
library(scoringutils)
library(cmdstanr)
library(lubridate)

# Set seed for reproducibility
set.seed(123)

# Configure options
options(mc.cores = parallel::detectCores())
```

# Conceptual framework: The forecasting-nowcasting continuum

- **The problem**: Real-time data is right-truncated due to reporting delays
- **Traditional approach**: Wait for "complete" data, then forecast
- **Better approach**: Account for truncation in the forecasting process
- **Key insight**: Nowcasting and forecasting are part of the same problem

:::{.callout-important}
## Why this matters

- Ignoring recent (truncated) data throws away valuable information
- Uncertainty from nowcasting should propagate to forecasts
- Joint models can leverage the full generative process
:::

## Visual demonstration of the problem

```{r}
# TODO: Create visualisation showing:
# - Complete vs incomplete data
# - Forecast starting points for different approaches
# - Information loss when ignoring recent data
```

# Data preparation and exploration

## Generate example dataset

- Create synthetic outbreak with known parameters
- Apply realistic reporting delays
- Introduce right truncation as would occur in real-time

```{r}
# TODO: Generate data with:
# - True infections following renewal process
# - Incubation period delays
# - Reporting delays with day-of-week effects
# - Right truncation window
```

## Visualise truncation patterns

- Show the "truncation triangle"
- Highlight what data would be available at forecast time
- Demonstrate the extent of missing data

```{r}
# TODO: Create plots showing:
# - Heatmap of reporting delays
# - Available vs missing data
# - Comparison of different forecast origins
```

# Approach 1: Naive forecasting (ignore truncation)

## Implementation

- Filter to only "complete" data (e.g., >14 days old)
- Estimate Rt on truncated series
- Forecast forward using standard renewal equation

## Key steps:

1. **Define completeness threshold**
   - Choose days to exclude (e.g., last 14 days)
   - Trade-off: more exclusion = less bias but older information

2. **Fit Rt estimation model**
   - Use model from Session 2
   - Apply to filtered data only

3. **Generate forecasts**
   - Project Rt forward (random walk or constant)
   - Simulate future infections
   - Apply delays to get observable quantities

```{r}
# TODO: Implement naive approach
# - Filter data
# - Fit model
# - Generate forecasts
# - Store results for comparison
```

:::{.callout-tip}
## Take 5 minutes

Run the naive forecasting approach and examine:
- Where does the forecast start?
- How much recent data are we ignoring?
- What assumptions are we making?

<details>
<summary>Solution</summary>
```{r}
# Solution code here
```
</details>
:::

# Approach 2: Simple correction then forecast

## Implementation

- Apply simple nowcasting correction (e.g., uniform scaling)
- Use "corrected" recent data in forecast
- Still treats nowcasting and forecasting separately

## Key steps:

1. **Estimate reporting completeness**
   - Calculate historical reporting patterns
   - Apply average correction factors

2. **Scale recent observations**
   - Multiply by inverse of completeness
   - Obtain point estimates of true values

3. **Forecast from corrected data**
   - Use adjusted data as if complete
   - Apply standard forecasting model

```{r}
# TODO: Implement simple correction approach
# - Calculate correction factors
# - Adjust recent data
# - Fit forecasting model
# - Generate predictions
```

## Limitations to discuss:

- No uncertainty in nowcast propagated
- Assumes stable reporting patterns
- May overcorrect or undercorrect

# Approach 3: Joint nowcast-forecast model

## Model extension

Starting from the joint nowcasting model (Session 7), we add:

1. **Forecast horizon parameters**
   - Number of days to forecast
   - Future time indices

2. **Rt projection**
   - Extend random walk into future
   - Allow for trend or external predictors

3. **Generated quantities for forecasts**
   - Future infections
   - Future symptom onsets
   - Future reports (with delays)

## Stan model modifications needed:

```{r}
# TODO: Show key additions to Stan model:
# - Extended time indices
# - Future Rt sampling
# - Predictive distributions
```

## Implementation steps:

1. **Prepare extended data**
   - Include forecast dates
   - Set up indexing for future periods

2. **Fit joint model**
   - Simultaneous nowcast and forecast
   - Full uncertainty propagation

3. **Extract predictions**
   - Posterior samples for all quantities
   - Proper prediction intervals

```{r}
# TODO: Run joint nowcast-forecast model
# - May use pre-fitted model to save time
# - Extract and process results
# - Generate forecast distributions
```

:::{.callout-note}
## Computational considerations

The joint model is more complex and slower to fit.
In practice, we might:
- Use a simplified version for real-time analysis
- Pre-compile and optimise the Stan model
- Consider variational inference for speed
:::

# Evaluation and comparison

## Visual comparison

Create a single plot showing all three approaches:

```{r}
# TODO: Create comparison plot with:
# - True values (if simulated data)
# - Observations (including those that arrive later)
# - Forecast medians and intervals for each method
# - Clear legend and formatting
```

## Quantitative evaluation

### Scoring metrics:

1. **CRPS (Continuous Ranked Probability Score)**
   - Proper scoring rule
   - Accounts for full distribution

2. **Interval coverage**
   - Do 50%, 90% intervals contain true values?
   - Check calibration

3. **Point forecast accuracy**
   - MAE, RMSE for comparison
   - Less informative than probabilistic metrics

```{r}
# TODO: Calculate scores for each approach
# - Use scoringutils package
# - Create comparison table
# - Visualise score differences
```

## Key insights to highlight:

- **Information usage**: Joint model uses all available data
- **Uncertainty**: Proper propagation vs. point estimates
- **Performance**: Trade-offs between methods
- **Generative process**: Models closer to true process perform better

:::{.callout-tip}
## Take 10 minutes

Compare the three approaches:

1. Which performs best on different metrics?
2. How does performance vary by forecast horizon?
3. What happens if reporting delays change?

<details>
<summary>Solution</summary>
```{r}
# Analysis code here
```
</details>
:::

# Going further

## Software implementations

- **EpiNow2**: Integrated nowcasting and forecasting for epidemics
- **epinowcast**: Next-generation nowcasting package
- **covidcast**: Real-time COVID-19 forecasting framework

## Extensions to explore:

### 1. Ensemble approaches
- Combine mechanistic and statistical forecasts
- Weight by recent performance
- Account for model uncertainty

### 2. Covariate integration
- External predictors (mobility, weather)
- Time-varying reporting patterns
- Holiday effects

### 3. Adaptive nowcasting
- Learn reporting delays online
- Adjust for changing patterns
- Real-time model selection

## Methods in practice:

- **COVID-19 response**: How real-time forecasts informed policy
- **Seasonal influenza**: Combining multiple data streams
- **Emerging outbreaks**: Rapid assessment with limited data

## Challenge exercises:

1. **Extend to multiple locations**
   - Hierarchical model for regions
   - Spatial correlation in delays

2. **Add mechanistic structure**
   - SEIR compartments
   - Age structure
   - Contact patterns

3. **Real-time evaluation**
   - Implement sliding window assessment
   - Track model performance over time

# Wrap up

## Key takeaways:

1. **Right truncation matters**: Ignoring it biases forecasts downward
2. **Joint modelling**: Propagates uncertainty appropriately
3. **Trade-offs exist**: Complexity vs. speed vs. accuracy
4. **Context dependent**: Best approach depends on use case

## Connecting to course themes:

- Proper uncertainty quantification (Sessions 1-2)
- Understanding the data generating process (Session 7)
- Forecast evaluation and scoring (Session 9)
- Real-world applications and impact

## Next steps:

- Try these approaches on your own data
- Explore the referenced packages
- Consider ensemble methods (Session 11)
- Read papers on real-time epidemic forecasting

# References

## Key papers:

- @abbott2020: EpiNow2 methodology
- @bastos2019: Joint nowcasting and forecasting framework
- @bosse2022: Forecast evaluation in epidemics
- @bracher2021: COVID-19 forecast hub methodology
- @funk2019: Real-time forecasting challenges
- @gneiting2007: Probabilistic forecasting theory
- @hawryluk2021: Gaussian process nowcasting
- @lison2024: Benefits of joint modeling
- @mcgough2020: Nowcasting by Bayesian smoothing

## R packages:

- [EpiNow2](https://epiforecasts.io/EpiNow2/)
- [epinowcast](https://package.epinowcast.org/)
- [scoringutils](https://epiforecasts.io/scoringutils/)
- [covidcast](https://cmu-delphi.github.io/covidcast/covidcastR/)

## Additional resources:

- [Epiforecasts blog posts](https://epiforecasts.io/posts/)
- [COVID-19 Forecast Hub](https://covid19forecasthub.org/)
- [Real-time analysis course materials](https://github.com/epiforecasts/nowcasting-course)